
Spring Integration with Spring Boot MessagingGateway, Gateway, Service Activator Example

Message - Message is a generic wrapper for any Java object. It has the header and the payload (your actual object)

Message Channel - it represents a pipe. messages are sent and received to and from a channel


@EnableIntegration - is useful when you have multiple config files in your application along with spring integration configurations

@IntegrationComponentScan - used for class path scaling just like @ComponentScan, but restricted to integration components where @ComponentScan cannot reach

@MessagingGateway - it is an interface that serves as a proxy abstraction over the messaging structure

@Gateway is usually annotated on the method signature inside the interface

DirectChannel - acts like a point to point channel and is the simplest

service activator - acts like a connecter between the spring managed object and the input channel
@Target(value={METHOD,ANNOTATION_TYPE})
 @Retention(value=RUNTIME)
 @Documented
public @interface ServiceActivator
Indicates that a method is capable of handling a message or message payload.
